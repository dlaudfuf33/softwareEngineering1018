from flask import Flask, render_template, request, redirect, url_for
import os
import cv2
import numpy as np

UPLOAD_FOLDER = 'uploads'
if not os.path.exists(UPLOAD_FOLDER):
    os.makedirs(UPLOAD_FOLDER)
    
app = Flask(__name__, static_folder=UPLOAD_FOLDER)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

def apply_mosaic_to_faces(image_path):
    face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
    image = cv2.imread(image_path)
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    faces = face_cascade.detectMultiScale(gray, 1.3, 5)
    
    for (x, y, w, h) in faces:
        face = image[y:y+h, x:x+w]
        face = cv2.resize(face, (w//15, h//15))
        face = cv2.resize(face, (w, h), interpolation=cv2.INTER_AREA)
        image[y:y+h, x:x+w] = face

    output_path = os.path.join(app.config['UPLOAD_FOLDER'], "mosaic_" + os.path.basename(image_path))
    cv2.imwrite(output_path, image)
    return output_path

@app.route('/', methods=['GET', 'POST'])
def index():
    original_image_url = None
    mosaic_image_url = None
    if request.method == 'POST':
        image = request.files['image']
        original_image_path = os.path.join(app.config['UPLOAD_FOLDER'], image.filename)
        image.save(original_image_path)
        mosaic_image_path = apply_mosaic_to_faces(original_image_path)
        
        original_image_url = url_for('static', filename=image.filename)
        mosaic_image_url = url_for('static', filename="mosaic_" + image.filename)
        
    return render_template('index.html', original_image_url=original_image_url, mosaic_image_url=mosaic_image_url)

if __name__ == '__main__':
    app.run(debug=True)